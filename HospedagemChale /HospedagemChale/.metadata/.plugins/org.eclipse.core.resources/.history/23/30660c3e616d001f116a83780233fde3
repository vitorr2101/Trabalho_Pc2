package br.com.pc2.rh.persistence;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import br.com.pc2.rh.model.Hospedagem;

public class HospedagemDAOImpl implements HospedagemDAO{

	@Override
	public String inserir(Hospedagem h) {
	    Connection con = null;
	    PreparedStatement pst = null;
	    try {
	        con = ConnectionFactory.getConnection();
	        con.setAutoCommit(false);

	        String sql = "INSERT INTO Hospedagem(codChale, estado, dataInicio, dataFim, qtdPessoas, desconto, valorFinal, codCliente) VALUES(?,?,?,?,?,?,?,?)";
	        pst = con.prepareStatement(sql);
	        pst.setInt(1, h.getCodChale());
	        pst.setString(2, h.getEstado());
	        pst.setDate(3, java.sql.Date.valueOf(h.getData_inicio()));
	        pst.setDate(4, java.sql.Date.valueOf(h.getData_fim()));
	        pst.setInt(5, h.getQtd_pessoas());
	        pst.setDouble(6, h.getDesconto());
	        pst.setDouble(7, h.getValor_final());
	        pst.setInt(8, h.getCodCliente());

	        int res = pst.executeUpdate();
	        con.commit();

	        return res > 0 ? "Inserido com sucesso" : "Erro ao inserir";
	    } catch (SQLException e) {
	        if (con != null) {
	            try {
	                con.rollback();
	            } catch (SQLException rollbackEx) {
	                rollbackEx.printStackTrace();
	            }
	        }
	        return "Erro ao inserir dados: " + e.getMessage();
	    } finally {
	        try {
	            if (pst != null) {
	                pst.close();
	            }
	            if (con != null) {
	                ConnectionFactory.close(con);
	            }
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }
	}




	@Override
	public String alterar(Hospedagem h) {
	    if (h.getCodHospedagem() == null) {
	        return "Código da hospedagem inválido.";
	    }

	    Connection con = ConnectionFactory.getConnection();
	    String sql = "UPDATE Hospedagem SET codChale = ?, estado = ?, dataInicio = ?, dataFim = ?, qtdPessoas = ?, desconto = ?, valorFinal = ?, codCliente = ? WHERE codHospedagem = ?";
	    try {
	        PreparedStatement pst = con.prepareStatement(sql);
	        pst.setInt(1, h.getCodChale());
	        pst.setString(2, h.getEstado());
	        pst.setObject(3, h.getData_inicio());
	        pst.setObject(4, h.getData_fim());
	        pst.setInt(5, h.getQtd_pessoas());
	        pst.setDouble(6, h.getDesconto());
	        pst.setDouble(7, h.getValor_final());
	        pst.setInt(8, h.getCodCliente());
	        pst.setInt(9, h.getCodHospedagem());

	        int res = pst.executeUpdate();
	        return res > 0 ? "Alterado com sucesso" : "Erro ao alterar os dados";
	    } catch (SQLException e) {
	        return "Erro ao alterar dados: " + e.getMessage();
	    } finally {
	        ConnectionFactory.close(con);
	    }
	}




	@Override
	public String excluir(Hospedagem h) {
	    if (h.getCodHospedagem() == null) {
	        return "Código da hospedagem inválido.";
	    }

	    Connection con = ConnectionFactory.getConnection();
	    String sql = "DELETE FROM Hospedagem WHERE codHospedagem = ?";
	    try {
	        PreparedStatement pst = con.prepareStatement(sql);
	        pst.setInt(1, h.getCodHospedagem());
	        int res = pst.executeUpdate();
	        return res > 0 ? "Excluído com sucesso" : "Erro ao excluir";
	    } catch (SQLException e) {
	        return "Erro ao excluir: " + e.getMessage();
	    } finally {
	        ConnectionFactory.close(con);
	    }
	}




	@Override
	public List<Hospedagem> listarTodos() {
	    Connection con = ConnectionFactory.getConnection();
	    String sql = "SELECT * FROM Hospedagem";
	    List<Hospedagem> lista = new ArrayList<>();
	    PreparedStatement pst = null;
	    ResultSet res = null;
	    
	    try {
	        pst = con.prepareStatement(sql);
	        res = pst.executeQuery();
	        
	        while (res.next()) {
	            Hospedagem h = new Hospedagem();
	            h.setCodChale(res.getInt("codChale"));
	            h.setEstado(res.getString("estado"));
	            h.setData_inicio(res.getDate("dataInicio").toLocalDate()); 
	            h.setData_fim(res.getDate("dataFim").toLocalDate()); 
	            h.setQtd_pessoas(res.getInt("qtdPessoas"));
	            h.setDesconto(res.getDouble("desconto"));
	            h.setValor_final(res.getDouble("valorFinal"));
	            h.setCodCliente(res.getInt("codCliente"));
	            lista.add(h);
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	    } finally {
	        try {
	            if (res != null) res.close();
	            if (pst != null) pst.close();
	        } catch (SQLException ex) {
	            ex.printStackTrace();
	        }
	        ConnectionFactory.close(con);
	    }
	    return lista;
	}

	
}
