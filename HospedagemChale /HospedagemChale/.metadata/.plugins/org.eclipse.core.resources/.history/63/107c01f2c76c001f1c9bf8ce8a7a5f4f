package br.com.pc2.rh.view.Hospedagem;

import br.com.pc2.rh.controller.HospedagemController;
import br.com.pc2.rh.model.Hospedagem;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class FrmHospedagem extends JFrame {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JTable tblConsulta;
    private JTextField txtEstado;
    private JSpinner spnDataInicio;
    private JSpinner spnDataFim;
    private JTextField txtQtdPessoas;
    private JTextField txtDesconto;
    private JTextField txtValorFinal;
    private JTextField txtCodCliente;
    private JLabel lblMensagem;
    private List<Hospedagem> listaHospedagens = new ArrayList<>();
    private HospedagemController hospedagemController = new HospedagemController();

    public static void main(String[] args) {
        EventQueue.invokeLater(() -> {
            try {
                FrmHospedagem frame = new FrmHospedagem();
                frame.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    public FrmHospedagem() {
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setBounds(100, 100, 608, 534);
        contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);

        JPanel panel = new JPanel();
        JPanel panel_1 = new JPanel();
        JPanel panel_2 = new JPanel();

        GroupLayout gl_contentPane = new GroupLayout(contentPane);
        gl_contentPane.setHorizontalGroup(
            gl_contentPane.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(GroupLayout.Alignment.TRAILING, gl_contentPane.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(gl_contentPane.createParallelGroup(GroupLayout.Alignment.TRAILING)
                        .addComponent(panel_2, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                        .addComponent(panel_1, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                        .addComponent(panel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE))
                    .addContainerGap())
        );
        gl_contentPane.setVerticalGroup(
            gl_contentPane.createParallelGroup(GroupLayout.Alignment.TRAILING)
                .addGroup(GroupLayout.Alignment.LEADING, gl_contentPane.createSequentialGroup()
                    .addComponent(panel, GroupLayout.PREFERRED_SIZE, 140, GroupLayout.PREFERRED_SIZE)
                    .addGap(18)
                    .addComponent(panel_1, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(panel_2, GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                    .addContainerGap())
        );

        JScrollPane scrollPane = new JScrollPane();
        GroupLayout gl_panel_2 = new GroupLayout(panel_2);
        gl_panel_2.setHorizontalGroup(
            gl_panel_2.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(GroupLayout.Alignment.TRAILING, gl_panel_2.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                    .addContainerGap())
        );
        gl_panel_2.setVerticalGroup(
            gl_panel_2.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(gl_panel_2.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addContainerGap())
        );

        tblConsulta = new JTable();
        tblConsulta.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int linha = tblConsulta.getSelectedRow();
                txtEstado.setText(tblConsulta.getValueAt(linha, 0).toString());
                spnDataInicio.setValue(tblConsulta.getValueAt(linha, 1));
                spnDataFim.setValue(tblConsulta.getValueAt(linha, 2));
                txtQtdPessoas.setText(tblConsulta.getValueAt(linha, 3).toString());
                txtDesconto.setText(tblConsulta.getValueAt(linha, 4).toString());
                txtValorFinal.setText(tblConsulta.getValueAt(linha, 5).toString());
                txtCodCliente.setText(tblConsulta.getValueAt(linha, 6).toString());
            }
        });
        tblConsulta.setModel(new DefaultTableModel(
            new Object[][] {},
            new String[] {
                "Estado", "Data Início", "Data Fim", "Qtd Pessoas", "Desconto", "Valor Final", "Código Cliente"
            }
        ) {
            Class[] columnTypes = new Class[] {
                String.class, Date.class, Date.class, Integer.class, Double.class, Double.class, Integer.class
            };
            @Override
            public Class getColumnClass(int columnIndex) {
                return columnTypes[columnIndex];
            }
            boolean[] columnEditables = new boolean[] {
                false, false, false, false, false, false, false
            };
            @Override
            public boolean isCellEditable(int row, int column) {
                return columnEditables[column];
            }
        });
        scrollPane.setViewportView(tblConsulta);
        panel_2.setLayout(gl_panel_2);

        JButton btnInserir = new JButton("Inserir");
        btnInserir.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                Hospedagem hospedagem = new Hospedagem();
                hospedagem.setEstado(txtEstado.getText());
                hospedagem.setData_inicio(convertToLocalDate((Date) spnDataInicio.getValue()));
                hospedagem.setData_fim(convertToLocalDate((Date) spnDataFim.getValue()));
                hospedagem.setQtd_pessoas(Integer.parseInt(txtQtdPessoas.getText()));
                hospedagem.setDesconto(Double.parseDouble(txtDesconto.getText()));
                hospedagem.setValor_final(Double.parseDouble(txtValorFinal.getText()));
                hospedagem.setCod_cliente(Integer.parseInt(txtCodCliente.getText()));
                lblMensagem.setText(hospedagemController.inserir(hospedagem));
            }
        });
        btnInserir.setBackground(new Color(240, 240, 240));

        JButton btnAlterar = new JButton("Alterar");
        btnAlterar.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int selectedRow = tblConsulta.getSelectedRow();

                if (selectedRow != -1) {
                    Hospedagem hospedagem = listaHospedagens.get(selectedRow);
                    if (hospedagem.getCodHospedagem() != null && hospedagem.getCodHospedagem() > 0) {
                        hospedagem.setEstado(txtEstado.getText());
                        hospedagem.setData_inicio(convertToLocalDate((Date) spnDataInicio.getValue()));
                        hospedagem.setData_fim(convertToLocalDate((Date) spnDataFim.getValue()));
                        hospedagem.setQtd_pessoas(Integer.parseInt(txtQtdPessoas.getText()));
                        hospedagem.setDesconto(Double.parseDouble(txtDesconto.getText()));
                        hospedagem.setValor_final(Double.parseDouble(txtValorFinal.getText()));
                        hospedagem.setCod_cliente(Integer.parseInt(txtCodCliente.getText()));
                        lblMensagem.setText(hospedagemController.alterar(hospedagem));
                    } else {
                        lblMensagem.setText("Código da hospedagem inválido.");
                    }
                } else {
                    lblMensagem.setText("Selecione uma hospedagem para alterar. Caso não tenha hospedagens aparecendo, utilize o botão pesquisar ou insira uma hospedagem primeiro.");
                }
            }
        });

        JButton btnExcluir = new JButton("Excluir");
        btnExcluir.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int selectedRow = tblConsulta.getSelectedRow();
                if (selectedRow != -1) {
                    Hospedagem hospedagem = listaHospedagens.get(selectedRow);
                    Object[] opcoes = {"Sim", "Não"};
                    int i = JOptionPane.showOptionDialog(null,
                        "Deseja excluir a hospedagem do cliente com o código: " + hospedagem.getCod_cliente() + " ?", "Exclusão",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                        null, opcoes, opcoes[1]);

                    if (i == 0) {
                        lblMensagem.setText(hospedagemController.excluir(hospedagem));
                        DefaultTableModel tbm = (DefaultTableModel) tblConsulta.getModel();
                        tbm.removeRow(selectedRow);
                        tblConsulta.setModel(tbm);
                    }
                } else {
                    lblMensagem.setText("Selecione uma hospedagem para excluir. Caso não tenha hospedagens aparecendo, utilize o botão pesquisar ou insira uma hospedagem primeiro.");
                }
            }
        });

        JButton btnPesquisar = new JButton("Listar");
        btnPesquisar.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                Date dataInicio = (Date) spnDataInicio.getValue();
                Date dataFim = (Date) spnDataFim.getValue();
                listaHospedagens = hospedagemController.listarTodos();

                DefaultTableModel modelo = (DefaultTableModel) tblConsulta.getModel();
                modelo.setRowCount(0);

                for (Hospedagem hospedagem : listaHospedagens) {
                    modelo.addRow(new Object[]{
                        hospedagem.getEstado(),
                        java.sql.Date.valueOf(hospedagem.getData_inicio()),
                        java.sql.Date.valueOf(hospedagem.getData_fim()),
                        hospedagem.getQtd_pessoas(),
                        hospedagem.getDesconto(),
                        hospedagem.getValor_final(),
                        hospedagem.getCod_cliente()
                    });
                }

                tblConsulta.setModel(modelo);
            }
        });

        JButton btnLimpar = new JButton("Limpar");
        btnLimpar.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                txtEstado.setText("");
                spnDataInicio.setValue(new Date());
                spnDataFim.setValue(new Date());
                txtQtdPessoas.setText("");
                txtDesconto.setText("");
                txtValorFinal.setText("");
                txtCodCliente.setText("");
            }
        });

        lblMensagem = new JLabel("");

        GroupLayout gl_panel_1 = new GroupLayout(panel_1);
        gl_panel_1.setHorizontalGroup(
            gl_panel_1.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(gl_panel_1.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(gl_panel_1.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(gl_panel_1.createSequentialGroup()
                            .addComponent(btnInserir, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnAlterar, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnExcluir, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnPesquisar, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnLimpar, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE))
                        .addComponent(lblMensagem))
                    .addContainerGap(34, Short.MAX_VALUE))
        );
        gl_panel_1.setVerticalGroup(
            gl_panel_1.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(gl_panel_1.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(gl_panel_1.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(btnInserir)
                        .addComponent(btnAlterar)
                        .addComponent(btnExcluir)
                        .addComponent(btnPesquisar)
                        .addComponent(btnLimpar))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(lblMensagem)
                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_1.setLayout(gl_panel_1);

        GroupLayout gl_panel = new GroupLayout(panel);
        gl_panel.setHorizontalGroup(
            gl_panel.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(gl_panel.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(gl_panel.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(gl_panel.createSequentialGroup()
                            .addGroup(gl_panel.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(new JLabel("Estado"))
                                .addComponent(new JLabel("Data Início"))
                                .addComponent(new JLabel("Data Fim"))
                                .addComponent(new JLabel("Qtd Pessoas"))
                                .addComponent(new JLabel("Desconto"))
                                .addComponent(new JLabel("Valor Final"))
                                .addComponent(new JLabel("Código Cliente")))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(gl_panel.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(txtEstado, GroupLayout.PREFERRED_SIZE, 300, GroupLayout.PREFERRED_SIZE)
                                .addComponent(spnDataInicio, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                .addComponent(spnDataFim, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtQtdPessoas, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtDesconto, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtValorFinal, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtCodCliente, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(40, Short.MAX_VALUE))
        );
        gl_panel.setVerticalGroup(
            gl_panel.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(gl_panel.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(gl_panel.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(new JLabel("Estado"))
                        .addComponent(txtEstado, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(gl_panel.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(new JLabel("Data Início"))
                        .addComponent(spnDataInicio, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(gl_panel.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(new JLabel("Data Fim"))
                        .addComponent(spnDataFim, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(gl_panel.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(new JLabel("Qtd Pessoas"))
                        .addComponent(txtQtdPessoas, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(gl_panel.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(new JLabel("Desconto"))
                        .addComponent(txtDesconto, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(gl_panel.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(new JLabel("Valor Final"))
                        .addComponent(txtValorFinal, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(gl_panel.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(new JLabel("Código Cliente"))
                        .addComponent(txtCodCliente, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel.setLayout(gl_panel);

        spnDataInicio = new JSpinner(new SpinnerDateModel(new Date(), null, null, java.util.Calendar.DAY_OF_MONTH));
        JSpinner.DateEditor editorInicio = new JSpinner.DateEditor(spnDataInicio, "dd/MM/yyyy");
        spnDataInicio.setEditor(editorInicio);

        spnDataFim = new JSpinner(new SpinnerDateModel(new Date(), null, null, java.util.Calendar.DAY_OF_MONTH));
        JSpinner.DateEditor editorFim = new JSpinner.DateEditor(spnDataFim, "dd/MM/yyyy");
        spnDataFim.setEditor(editorFim);

        contentPane.setLayout(gl_contentPane);
    }

    private LocalDate convertToLocalDate(Date date) {
        return date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }
}
